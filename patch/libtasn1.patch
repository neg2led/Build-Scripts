# Written and placed in public domain by Jeffrey Walton.
# This patch fixes some issues with libtasn1.
--- fuzz/corpus2array.c
+++ fuzz/corpus2array.c
@@ -112,7 +112,7 @@
 			printf("  { NULL");
 
 		if (e.type) {
-			int add = 0;
+			int i, add = 0;
 
 			// we leave the lowest 8 bit out
 			if ((e.type & 0xFF) == 17) {
@@ -120,7 +120,7 @@
 				add = 1;
 			}
 
-			for (int i = 8; i < 32 ; i++) {
+			for (i = 8; i < 32 ; i++) {
 				if ((e.type & (1U << i)) && typename[i - 8]) {
 					printf(add ? "|%s" : ", %s", typename[i - 8]);
 					add = 1;
--- fuzz/libtasn1_array2tree_fuzzer.c
+++ fuzz/libtasn1_array2tree_fuzzer.c
@@ -57,7 +57,8 @@
 	int nelem = size / sizeof(struct fuzz_elem);
 	asn1_static_node tab[MAXELEM + 1]; // avoid VLA here
 
-	for (int it = 0; it < nelem; it++) {
+	int it;
+	for (it = 0; it < nelem; it++) {
 		tab[it].type = elem[it].type;
 		elem[it].name[NAMESIZE - 1] = 0;
 		if (strcmp(elem[it].name, "NULL"))
# https://gitlab.com/gnutls/libtasn1/-/issues/32
--- lib/int.h
+++ lib/int.h
@@ -97,7 +97,7 @@
 #define ETYPE_TAG(etype) (_asn1_tags[etype].tag)
 #define ETYPE_CLASS(etype) (_asn1_tags[etype].class)
 #define ETYPE_OK(etype) (((etype) != ASN1_ETYPE_INVALID && \
-                          (etype) <= _asn1_tags_size && \
+                          (etype) < _asn1_tags_size && \
                           _asn1_tags[(etype)].desc != NULL)?1:0)
 
 #define ETYPE_IS_STRING(etype) ((etype == ASN1_ETYPE_GENERALSTRING || \
# https://gitlab.com/gnutls/libtasn1/-/issues/30
--- lib/coding.c
+++ lib/coding.c
@@ -265,9 +265,6 @@
   int len_len;
   int max_len;
 
-  if (der == NULL)
-    return ASN1_VALUE_NOT_VALID;
-
   max_len = *der_len;
 
   asn1_length_der (str_len, (max_len > 0) ? der : NULL, &len_len);
@@ -959,9 +956,6 @@
   unsigned char *out = NULL;
   int err;
 
-  if (der == NULL)
-    return ASN1_VALUE_NOT_VALID;
-
   counter = 0;
 
   if (type_field (node->type) != ASN1_ETYPE_SET_OF)
