# Written and placed in public domain by Jeffrey Walton
# This patch fixes some issues with Perl 5.32.0.
--- op.c
+++ op.c
@@ -14836,7 +14836,7 @@
             op_sibling_splice(parent, first, -1, NULL);
 	op_free(entersubop);
 
-	if (cvflags == (OP_ENTEREVAL | (1<<16)))
+	if (cvflags == (OP_ENTEREVAL | (1U<<16)))
 	    flags |= OPpEVAL_BYTES <<8;
 
 	switch (PL_opargs[opnum] & OA_CLASS_MASK) {
--- pp.c
+++ pp.c
@@ -32,6 +32,14 @@
 #include "reentr.h"
 #include "regcharclass.h"
 
+/* Inline ASM due to testing with UBsan and undefined behavior. ASM does
+ * not suffer C rules. See https://github.com/Perl/perl5/issues/17508.
+ * SunC added GCC inline asm support at version 12.1.
+ */
+#if defined(__GNUC__) || defined(__clang__) || defined(__INTEL_COMPILER) || (__SUNPRO_C >= 0x5100)
+# define GCC_INLINE_ASM 1
+#endif
+
 /* variations on pp_null */
 
 PP(pp_stub)
@@ -2625,7 +2633,17 @@
     tryAMAGICbin_MG(mult_amg, AMGf_assign);
     {
       dPOPTOPiirl_nomg;
+#if defined(GCC_INLINE_ASM) && (defined(__x86_64) || defined(__x86_64__) || defined(__amd64__))
+      long int res;
+      __asm__ ("imulq %2, %%rax;" : "=a" (res) : "a" (left), "g" (right) : "rdx", "cc" );
+      SETi( res );
+#elif defined(GCC_INLINE_ASM) && (defined(__i386) || defined(__i386__) || defined(__i686__))
+      long int res;
+      __asm__ ("imull %2, %%eax;" : "=a" (res) : "a" (left), "g" (right) : "edx", "cc" );
+      SETi( res );
+#else
       SETi( left * right );
+#endif
       RETURN;
     }
 }
@@ -2644,7 +2662,7 @@
 
       /* avoid FPE_INTOVF on some platforms when num is IV_MIN */
       if (value == -1)
-          value = - num;
+          value = -(unsigned long int)num;
       else
           value = num / value;
       SETi(value);
@@ -2675,7 +2693,17 @@
     tryAMAGICbin_MG(add_amg, AMGf_assign);
     {
       dPOPTOPiirl_ul_nomg;
+#if defined(GCC_INLINE_ASM) && (defined(__x86_64) || defined(__x86_64__) || defined(__amd64__))
+      long int res;
+      __asm__ ("addq %2, %%rax;" : "=a" (res) : "a" (left), "g" (right) : "cc" );
+      SETi( res );
+#elif defined(GCC_INLINE_ASM) && (defined(__i386) || defined(__i386__) || defined(__i686__))
+      long int res;
+      __asm__ ("addl %2, %%eax;" : "=a" (res) : "a" (left), "g" (right) : "cc" );
+      SETi( res );
+#else
       SETi( left + right );
+#endif
       RETURN;
     }
 }
@@ -2686,7 +2714,17 @@
     tryAMAGICbin_MG(subtr_amg, AMGf_assign);
     {
       dPOPTOPiirl_ul_nomg;
+#if defined(GCC_INLINE_ASM) && (defined(__x86_64) || defined(__x86_64__) || defined(__amd64__))
+      long int res;
+      __asm__ ("subq %2, %%rax;" : "=a" (res) : "a" (left), "g" (right) : "cc" );
+      SETi( res );
+#elif defined(GCC_INLINE_ASM) && (defined(__i386) || defined(__i386__) || defined(__i686__))
+      long int res;
+      __asm__ ("subl %2, %%eax;" : "=a" (res) : "a" (left), "g" (right) : "cc" );
+      SETi( res );
+#else
       SETi( left - right );
+#endif
       RETURN;
     }
 }
@@ -2784,7 +2822,7 @@
     {
 	SV * const sv = TOPs;
 	IV const i = SvIV_nomg(sv);
-	SETi(-i);
+	SETi( -(unsigned long int)i );
 	return NORMAL;
     }
 }
--- sv.c
+++ sv.c
@@ -35,6 +35,10 @@
 # include <rms.h>
 #endif
 
+#ifdef __sun
+# include <sunmath.h>
+#endif
+
 #ifdef __Lynx__
 /* Missing proto on LynxOS */
   char *gconvert(double, int, int,  char *);
--- regcomp.c
+++ regcomp.c
@@ -20886,7 +20886,7 @@
     ASSUME(REG_INTFLAGS_NAME_SIZE <= sizeof(flags)*8);
 
     for (bit=0; bit<REG_INTFLAGS_NAME_SIZE; bit++) {
-        if (flags & (1<<bit)) {
+        if (flags & (1U<<bit)) {
             if (!set++ && lead)
                 Perl_re_printf( aTHX_  "%s", lead);
             Perl_re_printf( aTHX_  "%s ", PL_reg_intflags_name[bit]);
@@ -20910,8 +20910,8 @@
     ASSUME(REG_EXTFLAGS_NAME_SIZE <= sizeof(flags)*8);
 
     for (bit=0; bit<REG_EXTFLAGS_NAME_SIZE; bit++) {
-        if (flags & (1<<bit)) {
-	    if ((1<<bit) & RXf_PMf_CHARSET) {	/* Output separately, below */
+        if (flags & (1U<<bit)) {
+	    if ((1U<<bit) & RXf_PMf_CHARSET) {	/* Output separately, below */
 		continue;
 	    }
             if (!set++ && lead)
--- numeric.c
+++ numeric.c
@@ -29,6 +29,10 @@
 #define PERL_IN_NUMERIC_C
 #include "perl.h"
 
+#ifdef __sun
+# include <sunmath.h>
+#endif
+
 #ifdef Perl_strtod
 
 PERL_STATIC_INLINE NV
--- vms/vms.c
+++ vms/vms.c
@@ -11145,7 +11145,7 @@
       sockflagsize = fdoff + 2;
     }
     if (fstat(fd, &sbuf.crtl_stat) == 0 && S_ISSOCK(sbuf.st_mode))
-      sockflags[fdoff] |= 1 << (fd % sizeof(unsigned int));
+      sockflags[fdoff] |= 1U << (fd % sizeof(unsigned int));
   }
   return fp;
 
@@ -11166,7 +11166,7 @@
     unsigned int fdoff = fd / sizeof(unsigned int);
 
     if (sockflagsize && fdoff < sockflagsize)
-      sockflags[fdoff] &= ~(1 << fd % sizeof(unsigned int));
+      sockflags[fdoff] &= ~(1U << fd % sizeof(unsigned int));
   }
   return fclose(fp);
 }
@@ -11193,7 +11193,7 @@
   int bufsize = itmsz * nitm + 1;
 
   if (fdoff < sockflagsize &&
-      (sockflags[fdoff] | 1 << (fd % sizeof(unsigned int)))) {
+      (sockflags[fdoff] | 1U << (fd % sizeof(unsigned int)))) {
     if (write(fd, src, itmsz * nitm) == EOF) return EOF;
     return nitm;
   }
--- ext/POSIX/POSIX.xs
+++ ext/POSIX/POSIX.xs
@@ -19,6 +19,10 @@
 #include "perl.h"
 #include "XSUB.h"
 
+#ifdef __sun
+# include <sunmath.h>
+#endif
+
 static int not_here(const char *s);
 
 #if defined(PERL_IMPLICIT_SYS)
--- cpan/Compress-Raw-Zlib/zlib-src/zutil.c
+++ cpan/Compress-Raw-Zlib/zlib-src/zutil.c
@@ -42,70 +42,70 @@
     }
     switch ((int)(sizeof(uLong))) {
     case 2:     break;
-    case 4:     flags += 1 << 2;        break;
-    case 8:     flags += 2 << 2;        break;
-    default:    flags += 3 << 2;
+    case 4:     flags += 1U << 2;        break;
+    case 8:     flags += 2U << 2;        break;
+    default:    flags += 3U << 2;
     }
     switch ((int)(sizeof(voidpf))) {
     case 2:     break;
-    case 4:     flags += 1 << 4;        break;
-    case 8:     flags += 2 << 4;        break;
-    default:    flags += 3 << 4;
+    case 4:     flags += 1U << 4;        break;
+    case 8:     flags += 2U << 4;        break;
+    default:    flags += 3U << 4;
     }
     switch ((int)(sizeof(z_off_t))) {
     case 2:     break;
-    case 4:     flags += 1 << 6;        break;
-    case 8:     flags += 2 << 6;        break;
-    default:    flags += 3 << 6;
+    case 4:     flags += 1U << 6;        break;
+    case 8:     flags += 2U << 6;        break;
+    default:    flags += 3U << 6;
     }
 #ifdef ZLIB_DEBUG
-    flags += 1 << 8;
+    flags += 1UL << 8;
 #endif
 #if defined(ASMV) || defined(ASMINF)
-    flags += 1 << 9;
+    flags += 1UL << 9;
 #endif
 #ifdef ZLIB_WINAPI
-    flags += 1 << 10;
+    flags += 1UL << 10;
 #endif
 #ifdef BUILDFIXED
-    flags += 1 << 12;
+    flags += 1UL << 12;
 #endif
 #ifdef DYNAMIC_CRC_TABLE
-    flags += 1 << 13;
+    flags += 1UL << 13;
 #endif
 #ifdef NO_GZCOMPRESS
-    flags += 1L << 16;
+    flags += 1UL << 16;
 #endif
 #ifdef NO_GZIP
-    flags += 1L << 17;
+    flags += 1UL << 17;
 #endif
 #ifdef PKZIP_BUG_WORKAROUND
-    flags += 1L << 20;
+    flags += 1UL << 20;
 #endif
 #ifdef FASTEST
-    flags += 1L << 21;
+    flags += 1UL << 21;
 #endif
 #if defined(STDC) || defined(Z_HAVE_STDARG_H)
 #  ifdef NO_vsnprintf
-    flags += 1L << 25;
+    flags += 1UL << 25;
 #    ifdef HAS_vsprintf_void
-    flags += 1L << 26;
+    flags += 1UL << 26;
 #    endif
 #  else
 #    ifdef HAS_vsnprintf_void
-    flags += 1L << 26;
+    flags += 1UL << 26;
 #    endif
 #  endif
 #else
-    flags += 1L << 24;
+    flags += 1UL << 24;
 #  ifdef NO_snprintf
-    flags += 1L << 25;
+    flags += 1UL << 25;
 #    ifdef HAS_sprintf_void
-    flags += 1L << 26;
+    flags += 1UL << 26;
 #    endif
 #  else
 #    ifdef HAS_snprintf_void
-    flags += 1L << 26;
+    flags += 1UL << 26;
 #    endif
 #  endif
 #endif
