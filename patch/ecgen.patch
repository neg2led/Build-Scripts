# Written and placed in public domain by Jeffrey Walton.
# This patch fixes some issues with ecgen.
--- test/src/Makefile
+++ test/src/Makefile
@@ -7,14 +7,13 @@
 
 
 CC ?= gcc
-CFLAGS = -Wall
 TEST ?= 0
 ifeq ($(TEST), 1)
-    CFLAGS += --coverage -g -O0
+    ECGEN_CFLAGS = --coverage -g -O0
 endif
-LDFLAGS = -L../../lib/parson -L../../lib/sha1 -L../../lib/pari -L../lib/criterion/build
-INCLUDES = -I. -I../../src -I../../lib -I../lib/criterion/include
-LIBS = -lrt -lpari -lpthread -lparson -lsha1 -lcriterion
+ECGEN_LDFLAGS = -L../../lib/parson -L../../lib/sha1 -L../../lib/pari -L../lib/criterion/build
+ECGEN_INCLUDES = -I. -I../../src -I../../lib -I../lib/criterion/include
+ECGEN_LIBS = -lrt -lpari -lpthread -lparson -lsha1 -lcriterion
 
 TEST_SRC = $(wildcard *.c) $(wildcard */*.c)
 TEST_HDR = $(wildcard */*.h)
@@ -27,16 +26,16 @@
 all: unittest
 
 unittest: test_ecgen
-	LD_LIBRARY_PATH=../lib/criterion/build ./test_ecgen --verbose=1 --filter \!\(brainpool_rfc/test_brainpool_rfc_params\)
+	LD_LIBRARY_PATH=../lib/criterion/build DYLD_LIBRARY_PATH=../lib/criterion/build ./test_ecgen --verbose=1 --filter \!\(brainpool_rfc/test_brainpool_rfc_params\)
 
 fulltest: test_ecgen
-	LD_LIBRARY_PATH=../lib/criterion/build ./test_ecgen --verbose=1
+	LD_LIBRARY_PATH=../lib/criterion/build DYLD_LIBRARY_PATH=../lib/criterion/build ./test_ecgen --verbose=1
 
 test_ecgen: $(TEST_OBJ) $(ECGEN_OBJ)
-	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $^ $(LDFLAGS) $(LIBS)
+	$(CC) $(strip $(CPPFLAGS) $(ECGEN_INCLUDES) $(ECGEN_CFLAGS) $(CFLAGS) -o) $@ $^ $(ECGEN_LDFLAGS) $(LDFLAGS) $(ECGEN_LIBS) $(LIBS)
 
 %.o: %.c
-	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<
+	$(CC) $(strip $(CPPFLAGS) $(ECGEN_INCLUDES) $(ECGEN_CFLAGS) $(CFLAGS) -c -o) $@ $<
 
 clean-all: clean
 	rm -f ./test_ecgen
@@ -53,4 +52,4 @@
 	clang-format -i $(TEST_SRC)
 	clang-format -i $(TEST_HDR)
 
-.PHONY: all clean-all clean clean-cov format
\ No newline at end of file
+.PHONY: all clean-all clean clean-cov format
--- test/Makefile
+++ test/Makefile
@@ -27,4 +27,4 @@
 	+$(MAKE) -C src clean-cov
 
 format:
-	+$(MAKE) -C src format
\ No newline at end of file
+	+$(MAKE) -C src format
--- src/Makefile
+++ src/Makefile
@@ -14,32 +14,32 @@
 STATIC ?= 0
 
 ifeq ($(DEBUG), 1)
-    CFLAGS += -DDEBUG -g -Og -Werror -pedantic
+    ECGEN_CFLAGS = -DDEBUG -g -Og -Werror -pedantic
 else ifeq ($(TEST), 1)
-	CFLAGS += -DNDEBUG --coverage -g -O0
+	ECGEN_CFLAGS = -DNDEBUG --coverage -g -O0
 else ifeq ($(FAST), 1)
     ifeq ($(CC), gcc)
-        CFLAGS += -DNDEBUG -O3 -march=native -pipe
+        ECGEN_CFLAGS = -DNDEBUG -O3 -march=native -pipe
     else
-        CFLAGS += -DNDEBUG -O3
+        ECGEN_CFLAGS = -DNDEBUG -O3
     endif
 else
-    CFLAGS += -DNDEBUG -O2
+    ECGEN_CFLAGS = -DNDEBUG -O2
 endif
 
-LDFLAGS = -L../lib/parson -L../lib/sha1 -L../lib/pari
+ECGEN_LDFLAGS = -L../lib/parson -L../lib/sha1 -L../lib/pari
 ifeq ($(STATIC), 1)
-	LIBS = -lrt -Wl,-Bstatic -lpari -Wl,-Bdynamic -lpthread -lparson -lsha1 -lm -lgmp -ldl
+	ECGEN_LIBS = -lrt -Wl,-Bstatic -lpari -Wl,-Bdynamic -lpthread -lparson -lsha1 -lm -lgmp -ldl
 else
-	LIBS = -lrt -lpari -lpthread -lparson -lsha1
+	ECGEN_LIBS = -lrt -lpari -lpthread -lparson -lsha1
 endif
 
-INCLUDES = -I. -I../lib
+ECGEN_INCLUDES = -I. -I../lib
 
 
-GIT_COMMIT = $(shell git rev-parse --short HEAD)
+GIT_COMMIT = $(shell git rev-parse --short HEAD 2>/dev/null)
 ifneq ($(GIT_COMMIT),)
-	CFLAGS += -DGIT_COMMIT=\"$(GIT_COMMIT)\"
+	ECGEN_CFLAGS += -DGIT_COMMIT=\"$(GIT_COMMIT)\"
 endif
 
 ####
@@ -55,11 +55,11 @@
 all: ecgen
 
 ecgen: ecgen.o $(ECGEN_OBJ)
-	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $^ $(LDFLAGS) $(LIBS)
+	$(CC) $(strip $(CPPFLAGS) $(ECGEN_INCLUDES) $(ECGEN_CFLAGS) $(CFLAGS) -o) $@ $^ $(ECGEN_LDFLAGS) $(LDFLAGS) $(ECGEN_LIBS) $(LIBS)
 	mv ecgen ..
 
 %.o: %.c
-	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<
+	$(CC) $(strip $(CPPFLAGS) $(ECGEN_INCLUDES) $(ECGEN_CFLAGS) $(CFLAGS) -c -o) $@ $<
 
 ####
 
--- lib/parson/Makefile
+++ lib/parson/Makefile
@@ -1,6 +1,4 @@
 CC ?= gcc
-CCFLAGS ?= -Wall
-LDFLAGS =
 
 SOURCES = $(wildcard *.c)
 OBJECTS = $(SOURCES:.c=.o)
@@ -11,13 +9,13 @@
 all: $(TARGET)
 
 $(TARGET): $(OBJECTS)
-	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)
+	$(CC) $(strip $(CPPFLAGS) $(CFLAGS) -o) $@ $^ $(LDFLAGS) $(LIBS)
 
 $(A): $(OBJECTS)
 	ar rcs $(A) $(OBJECTS)
 
 %.o: %.c
-	$(CC) $(CFLAGS) -c $<
+	$(CC) $(strip $(CPPFLAGS) $(CFLAGS) -c) $<
 
 clean:
 	rm -f *.o *.a $(TARGET)
--- lib/Makefile
+++ lib/Makefile
@@ -1,21 +1,20 @@
 CC ?= gcc
 
-CFLAGS = -Wall
 DEBUG ?= 0
 TEST ?= 0
 FAST ?= 0
 ifeq ($(DEBUG), 1)
-    CFLAGS += -DDEBUG -g -Og -Werror -pedantic
+    ECGEN_CFLAGS = -DDEBUG -g -Og -Werror -pedantic
 else ifeq ($(TEST), 1)
-	CFLAGS += -DNDEBUG --coverage -g -O0
+	ECGEN_CFLAGS = -DNDEBUG --coverage -g -O0
 else ifeq ($(FAST), 1)
     ifeq ($(CC), gcc)
-        CFLAGS += -DNDEBUG -O3 -march=native -pipe
+        ECGEN_CFLAGS = -DNDEBUG -O3 -march=native -pipe
     else
-        CFLAGS += -DNDEBUG -O3
+        ECGEN_CFLAGS = -DNDEBUG -O3
     endif
 else
-    CFLAGS += -DNDEBUG -O2
+    ECGEN_CFLAGS = -DNDEBUG -O2
 endif
 export
 
@@ -25,4 +24,4 @@
 
 clean:
 	$(MAKE) -C parson clean
-	$(MAKE) -C sha1 clean
\ No newline at end of file
+	$(MAKE) -C sha1 clean
--- lib/sha1/Makefile
+++ lib/sha1/Makefile
@@ -1,6 +1,4 @@
 CC ?= gcc
-CFLAGS ?= -Wall
-LDFLAGS =
 
 SOURCES = $(wildcard *.c)
 OBJECTS = $(SOURCES:.c=.o)
@@ -11,13 +9,13 @@
 all: $(TARGET)
 
 $(TARGET): $(OBJECTS)
-	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)
+	$(CC) $(strip $(CPPFLAGS) $(CFLAGS) -o) $@ $^ $(LDFLAGS) $(LIBS)
 
 $(A): $(OBJECTS)
 	ar rcs $(A) $(OBJECTS)
 
 %.o: %.c
-	$(CC) $(CFLAGS) -c $<
+	$(CC) $(strip $(CPPFLAGS) $(CFLAGS) -c) $<
 
 clean:
 	rm -f *.o *.a $(TARGET)
--- src/invalid/invalid.c
+++ src/invalid/invalid.c
@@ -239,7 +239,9 @@
 	pthread_t pthreads[cfg->threads];
 	thread_t threads[cfg->threads];
 	struct pari_thread pari_threads[cfg->threads];
-	pari_thread_sync();
+#if PARI_VERSION_CODE < PARI_VERSION(2,12,1)
+	pari_thread_sync();
+#endif
 
 	size_t generated = 0;
 	state_e states[nprimes];
--- src/gen/field.c
+++ src/gen/field.c
@@ -7,6 +7,12 @@
 #include "io/output.h"
 #include "math/poly.h"
 
+#if PARI_VERSION_CODE >= PARI_VERSION(2,12,1)
+#  define ecgen_isirreducible(x) polisirreducible(x)
+#else
+#  define ecgen_isirreducible(x) isirreducible(x)
+#endif
+
 static GEN field_primer(unsigned long bits) { return random_prime(bits); }
 
 static GEN field_binaryr(unsigned long bits) {
@@ -84,7 +90,7 @@
 			gel(v, 1) = gen_1;
 
 			GEN poly = gmul(gtopolyrev(v, -1), gmodulss(1, 2));
-			if (!isirreducible(poly)) {
+			if (!ecgen_isirreducible(poly)) {
 				fprintf(err, "Polynomial is reducible.\n");
 				avma = ltop;
 				return 0;
